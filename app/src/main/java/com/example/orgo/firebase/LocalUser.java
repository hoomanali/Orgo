package com.example.orgo.firebase;

import java.util.ArrayList;
import java.util.List;

/**
 * Simple class to manage and pass around locally stored user information.
 */
public class LocalUser {

    // Fields
    private String nameFirst;           // First name
    private String nameLast;            // Last name
    private String email;               // Email address
    private String UID;                 // UID assigned by Firebase Auth
    private String biography;           // User's biography
    private ArrayList<String> groups;   // List of groups the user is a member of
    private Byte[] photo;               // Byte array of user's profile photo, can be empty.

    /**
     * Constructs an empty LocalUser object.
     */
    public LocalUser() {
        this.nameFirst = "";
        this.nameLast = "";
        this.email = "";
        this.UID = "";
        this.biography = "";
        this.groups = new ArrayList<String>();
        //this.photo = new Byte[0];
    }

    /**
     * Constructs a locally stored LocalUser object to pass a single user's data around.
     *
     * @param nameFirst First name of user.
     * @param nameLast Last name of user.
     * @param email User's full email address.
     * @param UID The UID generated by Firebase Auth.
     * @param biography The user's profile bio.
     * @param groups List of groups the user is a member of.
     */
    public LocalUser(String nameFirst, String nameLast, String email, String UID, String biography,
                     ArrayList<String> groups) {
        this.nameFirst = nameFirst;
        this.nameLast = nameLast;
        this.email = email;
        this.UID = UID;
        this.biography = biography;
        this.groups = groups;
        /*
        if(photo == null) {
            this.photo = new Byte[0];
        } else {
            this.photo = photo;
        }
         */
    }

    /**
     * Get the first name of the user.
     *
     * @return A string representing the user's first name.
     */
    public String getNameFirst() {
        return nameFirst;
    }

    /**
     * Sets the user's first name.
     *
     * @param nameFirst
     */
    public void setNameFirst(String nameFirst) {
        this.nameFirst = nameFirst;
    }

    /**
     * Get the last name of the user.
     *
     * @return A string representing the user's last name.
     */
    public String getNameLast() {
        return nameLast;
    }

    /**
     * Sets the user's last name.
     *
     * @param nameLast
     */
    public void setNameLast(String nameLast) {
        this.nameLast = nameLast;
    }

    /**
     * Get the user's email address.
     *
     * @return A string representing the email address of the user.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the user's email address.
     *
     * @param email The user's email address.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the user's UID.
     *
     * @return The UID generated by Firebase Auth.
     */
    public String getUID() {
        return UID;
    }

    /**
     * Sets the user's UID.
     * @param UID The UID generated by Firebase Auth.
     */
    public void setUID(String UID) {
        this.UID = UID;
    }

    /**
     * Get the user's profile biography.
     * @return The bio in string format.
     */
    public String getBiography() {
        return biography;
    }

    /**
     * Set the user's biography.
     * @param biography The profile bio as a string.
     */
    public void setBiography(String biography) {
        this.biography = biography;
    }

    /**
     * Gets an ArrayList of Strings representing the groups the user is a member of.
     * @return ArrayList of group names.
     */
    public ArrayList<String> getGroupsArrayList() {
        return groups;
    }

    /**
     * Gets an List of Strings representing the groups the user is a member of.
     * @return List of group names.
     */
    public List<String> getGroupsList() {
        List<String> groupList = this.groups;
        return groupList;
    }

    /**
     * Sets the list of groups the user is a member of.
     * @param groups
     */
    public void setGroups(ArrayList<String> groups) {
        this.groups = groups;
    }

    /**
     * Add a group to the list of groups the user is a member of.
     * @param groupName The name of the group the user is joining.
     * @return An ArrayList of all the groups the user is a member of, including the new group.
     */
    public ArrayList<String> addGroupToList(String groupName) {
        this.groups.add(groupName);
        return this.groups;
    }

    /**
     * Remove a group from the user's group list.
     * @param groupName The group to be removed.
     * @return The new ArrayList with the designated group removed.
     */
    public ArrayList<String> removeGroupFromList(String groupName) {
        this.groups.remove(groupName);
        return this.groups;
    }

    /**
     * Get the full name (First Last) of the user.
     * @return A string containing the full name.
     */
    public String getNameFull() {
        return this.nameFirst + " " + this.nameLast;
    }

    /*
     * Get the user's photo as a byte array. If there is no photo, byte array will have size 0.
     * @return Byte array storing binary representation of photo.
     */
    // public Byte[] getPhoto() {
    //     return this.photo;
    // }

    /*
     * Set the user's profile photo from a byte array. Can accept a null value.
     * @param photo A byte array representing the user's photo in binary.
     */
    // public void setPhoto(Byte[] photo) {
    //     if(photo != null) {
    //         this.photo = photo;
    //     } else {
    //         this.photo = new Byte[0];
    //     }
    // }

}
